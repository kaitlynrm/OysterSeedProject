antitest <- never_expressed_proteins[,c(2:27)]
View(antitest)
View(never_expressed_proteins)
write_excel_csv(test, "c:/Desktop")
write_excel_csv(test, "C:\Users\Katty\Desktop\protein_abundance")
write.csv(test, "C:\Users/Katty/Desktop/protein_abundance/")
write.csv(test, "C:\Users/Katty/Desktop/protein_abundance/no_expression")
cd
pwd
getwd()
write.csv(test, "Desktop/protein_abundance/no_expression.csv")
write.csv(test, "Desktop/protein_abundance/no_expression.csv")
library(readr)
never_exressed_proteins <- read_csv("~/Desktop/protein_abundance/never_expressed_proteins.
q
wq
n
q
write.csv(test, "Desktop/protein_abundance/no_expression.cs
all_data <- read_xlsx("Documents/robertslab/labnotebook/raw_data/annotated_os.xlsx")
all_data <- read_csv("Desktop/protein_abundance/annotated_os.csv")
View(all_data)
all_data <- read_csv("Desktop/protein_abundance/annotated_os.csv")
test <- all_data([,c(1:7, seq(from = 8, to = 29, by = 3))])
test <- all_data(,c(1:7, seq(from = 8, to = 29, by = 3)))
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 3))]
View(test)
silo2 <- test
rm(test)
View(silo2)
View(all_data)
test <- all_data[,c(1:7, 30:100, seq(from = 8, to = 29, by = 3))]
View(test)
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 3), 30:100)]
16:23
test2 <- test(,c(,-15:-23))
test2 <- test[,c(,-15:-23)]
test2 <- test[,c(,-15:23)]
test2 <- test[,-(c(,-15:23))]
test2 <- test[,-15:23]
test2 <- test[, c(1:15,24:100)]
test2 <- test[, c(1:15,24:86)]
View(test2)
write.csv(test, "Desktop/protein_abundance/silo2_raw.csv")
View(silo2)
View(test)
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 2), 30:100)]
View(test)
test <- all_data[,c(1:7, seq(from = 10, to = 31, by = 2), 30:100)]
View(test)
test <- all_data[,c(1:7, seq(from = 10, to = 31, by = 3), 30:100)]
View(test)
silo9 <- test
view(test2)
View(test2)
silo2 <- test2
rm(test2)
rm(test)
View(silo9)
rm(silo9)
View(all_data)
test <- all_data[, c(1:7), seq(from = 8, to = 30, by = 3), 31:100]
test <- all_data[, c(1:7, seq(from = 8, to = 30, by = 3), 31:100)]
View(test)
test <- all_data[, c(1:7, seq(from = 9, to = 30, by = 3), 31:100)]
View(all_data)
test <- all_data[, c(1:7, seq(from = 8, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 8, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 9, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 9, to = 30, by = 3), 30:100)]
View(test)
test <- all_data[, c(1:7, seq(from = 9, to = 28, by = 3), 29:100)]
silo3 <- test
test <- all_data[, c(1:7, seq(from = 10, to = 28, by = 3), 29:100)]
View(test)
silo9 <- test
View(silo9)
View(silo2)
View(silo3)
View(silo9)
write.csv()
write.csv(silo2, "Desktop/protein_abundance/silo2_proteins")
write.csv(silo3, "Desktop/protein_abundance/silo3_proteins")
write.csv(silo9, "Desktop/protein_abundance/silo9_proteins")
write.csv(silo2, "Desktop/protein_abundance/silo2_proteins.csv")
write.csv(silo9, "Desktop/protein_abundance/silo9_proteins.csv")
write.csv(silo3, "Desktop/protein_abundance/silo3_proteins.csv")
#Set WD
getwd()
setwd("C:/Users/Katty/Documents/robertslab/oysterseedproject/R_work/")
#Install and load packages
install.packages("vegan")
library(vegan)
install.packages("raster")
library(raster)
install.packages("BioStatR")
library(BioStatR)
source("biostats.R")
########Create NMDS plot with silo 3 and 9################
#upload file
ABACUSdata <- read.csv("~/Documents/robertslab/oysterseedproject/raw_os_data/ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
#Remove NA
ABACUSdata[is.na(ABACUSdata)] <- 0
#Transpose- switch rows and columns
tABACUSdata <- t(ABACUSdata)
View(tABACUSdata)
#Rename Columns and remove row
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata = tABACUSdata[-1,]
Head(tABACUSdata)
#Convert to numeric
is.numeric(tABACUSdata)
#Remove Silo 2
silo3and9 <- tABACUSdata[-(seq(from = 2, to = 22, by = 3)), ]
#Make MDS dissimilarity matrix
nmds.silo3and9 <- metaMDS(silo3and9, distance = 'euclidean', k = 2, trymax = 3000, autotransform = FALSE)
#upload file
ABACUSdata <- read.csv("~Documents\robertslab\labnotebook\raw_data\ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
ABACUSdata <- read.csv("Documents\robertslab\labnotebook\raw_data\ABACUSdata.csv", header=TRUE)
library(readr)
ABACUSdata <- read_csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv")
View(ABACUSdata)
ABACUSdata <- read.csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
View(ABACUSdata)
#Remove NA
ABACUSdata[is.na(ABACUSdata)] <- 0
#Transpose- switch rows and columns
tABACUSdata <- t(ABACUSdata)
View(tABACUSdata)
#Rename Columns and remove row
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata = tABACUSdata[-1,]
Head(tABACUSdata)
#Convert to numeric
is.numeric(tABACUSdata)
install.packages("installr");
library(installr)
updateR()
install.packages("installr");
install.packages("installr")
library(installr)
updateR()
#install packages for vegan and cluster
install.packages("vegan")
library(vegan)
install.packages("cluster")
library(cluster)
install.packages("cluster")
library(permute)
library(lattice)
library(vegan)
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
install.packages("vegan")
install.packages("vegan")
library(permute)
library(lattice)
library(vegan)
install.packages("cluster")
install.packages("cluster")
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
install.packages("vegan")
library(vegan)
install.packages("vegan")
library(permute)
library(lattice)
library(vegan)
library(raster)
library(sp)
library(raster)
library(sp)
library(BioStatR)
source("biostats.R")
ABACUSdata <- read.csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv", header=TRUE)
tABACUSdata <- t(ABACUSdata)
is.numeric(ABACUSdata)
as.numeric(ABACUSdata)
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata <- tABACUSdata[-1,]
tABACUSdata[is.na(tABACUSdata)] <- 0
is.numeric(tABACUSdata)
as.numeric(tABACUSdata)
is.numeric(tABACUSdata)
tABACUSdata2 <- as.numeric(tABACUSdata)
is.numeric(tABACUSdata2)
write.csv("Documents/robertslab/tABACUS2.csv")
write.csv("Documents/robertslab/", tABACUSdata.csv)
?write.csv
write.csv(tABACUSdata, "Documents/robertslab/tABACUSdata.csv")
?clusplot()
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
pca_silo2 <- princomp(silo2)
summary(pca_silo2)
screeplot(pca_silo2)
silo2.2clus <- kmeans(silo2.eucd, centers=2, iter.max=10000, nstart=25)
View(tABACUSdata)
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
#Packages for annotations
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
#WGCNA package
install.packages("path/to/file", repos = NULL, lib=.Library)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
#Packages for annotations
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
#WGCNA package
install.packages("path/to/file", repos = NULL, lib=.Library)
install.packages("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("matrixStats") , "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("matrixStats")
install.packages( , "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("Hmisc")
install.packages("splines")
install.packages("foreach")
install.packages("doParallel")
install.packages("fastcluster")
install.packages("dynamicTreeCut")
install.packaches("survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
library(matrixStats, Hmisc, splines, foreach, doParallel, fastcluster, dynamicTreeCut, survival)
library(matrixStats) library(Hmisc) library(splines) library(foreach) library(doParallel) library(fastcluster) library(dynamicTreeCut) library(survival)
library(matrixStats), library(Hmisc) library(splines) library(foreach) library(doParallel) library(fastcluster) library(dynamicTreeCut) library(survival)
library(matrixStats)
library(Hmisc)
library(lattice)
library(survival)
library(permute)
library(Formula)
library(ggplot2)
library(matrixStats)
library(Hmisc)
library(splines)
library(foreach)
library(doParallel)
library(fastcluster)
library(iterators)
library(parallel)
library(doParallel)
library(fastcluster)
library(dynamicTreeCut)
library(survival)
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
library(permute)
library(lattice)
library(vegan)
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
pca_silo2 <- princomp(silo2)
summary(pca_silo2)
screeplot(pca_silo2)
silo2.2clus <- kmeans(silo2.eucd, centers=4, iter.max=10000, nstart=25)
silo2.2clus <- kmeans(silo2.eucd, centers=3, iter.max=10000, nstart=25)
silo2.3clus <- kmeans(silo2.eucd, centers=3, iter.max=10000, nstart=25)
save.image("~/Documents/robertslab/r.RData")
?kmeans
?options
?max.print
silo2.3clus
show
library(vegan, cluster, pvclust, fpc)
sessionInfo()
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
View(silo2)
?rowMeans
silo2$mean <- rowMeans(silo2)
View(silo2)
silo2$stdev <- rowSds(silo2)
install.packages("matrixStats")
library(matrixStats)
silo2$stdev <- rowSds(silo2)
?apply
silo2.matrix <-  data.matrix(silo2, rownames.force = NULL)
silo2.matrix <-  data.matrix(silo2)
silo2$stdev <- rowSds(silo2)
silo2.matrix$stdev <- rowSds(silo2)
silo2$stdev <- rowSds(silo2.matrix) #standard deviation
install.packages("matrixStats")
library(matrixStats)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2$mean <- rowMeans(silo2) #mean
silo2.matrix <-  data.matrix(silo2)
silo2$stdev <- rowSds(silo2.matrix) #standard deviation
silo2$variance <- rowVars(silo2.matrix) #variance
silo2$total-abundance <- rowSums(silo2) #sum
?row
silo2$Total.Abundance <- rowSums(silo2) #sum
silo2$median <- rowMedians(silo2)
silo2$median <- rowMedians(silo2.matrix)
setwd("Documents/robertslab/labnotebook/analysis/clustering/silo3_9/")
bp.direct <- read.delim("all-proteins/enrichment/bp-direct.txt", header = TRUE, sep = "\t", dec = ".")
library(reshape)
split <- transform(bp.direct, Term = colsplit(Term, split = "\\~", names = c('accesion', 'term') ))
split2 <- seperate(split, 'Genes', paste("Genes", 1:4, sep="_"), sep=",", extra="drop")
library(tidyr)
split2 <- seperate(split, 'Genes', paste("Genes", 1:4, sep="_"), sep=",", extra="drop")
split2 <- separate(split, 'Genes', paste("Genes", 1:4, sep="_"), sep=",", extra="drop")
View(split2)
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop")
View(bp.direct)
terms <- split2[,c(3,7:9)]
View(terms)
terms <- split2[,c(3)]
View(terms)
terms <- split2[,3]
terms <- split2
terms[,3]
terms[,1]
terms[,2]
terms[,7]
terms[,8]
split <- seperate(bp.direct, 'Terms', c("Accession", "Term"), sep=",")
split <- separate(bp.direct, 'Terms', c("Accession", "Term"), sep=",")
bp.direct <- read.delim("all-proteins/enrichment/bp-direct.txt", header = TRUE, sep = "\t", dec = ".")
library(reshape)
library(tidyr)
split <- separate(bp.direct, 'Terms', c("Accession", "Term"), sep=",")
split <- separate(bp.direct, 'Terms', c("Accession", "Term"))
View(bp.direct)
split <- separate(bp.direct, 'Term', c("Accession", "Term"))
View(split)
split <- separate(bp.direct, 'Term', c("Accession", "Term"), sep=",")
split <- separate(bp.direct, 'Term', c("Accession", "Term"), sep="~")
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop")
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop", fill="")
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop")
terms <- split2[,c(3,7:9)]
gathered <- gather(terms, key="Genes", value="Term")
View(gathered)
gathered <- gather(terms, key="Genes", value="Term", c(1:4))
gathered <- gather(terms, key="Gene", value="Term", c(2:4))
gathered <- gather(terms, key="number", value="genes", c(2:4))
gathered <- gathered[,c(1,3)]
gathered <- gather(terms, key="number", value="genes", c(2:4))
gathered2 <- gathered[,c(1,3)]
View(gathered2)
gathered <- gathered[,c(1,3)]
bp.direct <- read.delim("all-proteins/enrichment/bp-direct.txt", header = TRUE, sep = "\t", dec = ".")
library(tidyr)
View(bp.direct)
split <- separate(bp.direct, 'Term', c("Accession", "Term"), sep="~")
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop")
terms <- split2[,c(3,7:9)]
data <- gather(data, key = "Time", value = "abundance", c(2:9))
bp.direct <- read.delim("all-proteins/enrichment/bp-direct.txt", header = TRUE, sep = "\t", dec = ".")
library(tidyr)
split <- separate(bp.direct, 'Term', c("Accession", "Term"), sep="~")
split2 <- separate(split, 'Genes', paste("Genes", 1:3, sep="_"), sep=",", extra="drop")
terms <- split2[,c(3,7:9)]
data <- gather(data, key = "Time", value = "abundance", c(2:9))
gathered <- gather(terms, key="number", value="genes", c(2:4))
gathered <- gathered[,c(1,3)]
View(gathered)
unq.prot <- read.csv("all-proteins/silo3_9-clus-annot.csv")
View(terms)
View(unq.prot)
unq.prot <- read.csv("all-proteins/unique-clus-prot-silo3_9.csv")
unq.acces <- unq.prot[,38]
unq.acces <- unq.prot[,c(38)]
unq.acces <- unq.prot[,c(1,38)]
View(unq.acces)
colnames(unq.acces)[2] <- "genes"
merge <- merge(unq.acces, gathered, by = "genes")
View(merge)
View(unq.acces)
View(unq.prot)
unq.acces <- unq.prot[,c(1,3:11,38)]
colnames(unq.acces)[11] <- "genes"
merge <- merge(unq.acces, gathered, by = "genes")
View(merge)
merge <- merge(unq.acces, gathered, by = "genes", all = TRUE)
merge <- merge(unq.acces, gathered, by = "genes", all.x = TRUE)
merge <- merge(unq.acces, gathered, by = "genes")
merge[order(merge$Term),]
sort <- merge[order(merge$Term),]
View(sort)
silo9 <- seq(nrow(sort), 2)
View(silo9)
sort[silo9,]
n <- length(sort)
sort[seq[1, n, 2]]
sort[seq(1, n, 2)]
silo9 <- sort[seq(1, n, 2)]
silo9 <- sort[seq(1, n, 2),]
rownames(silo9) <- silo9[,12]
silo9 <- silo9[,c(4:11)]
colnames(silo9) <- ("0", "3", "5", "7", "9", "11", "13","15")
colnames(silo9) <- c("0", "3", "5", "7", "9", "11", "13","15")
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Colv=NA)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ")
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ")
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA)
,
NA
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
silo3 <- sort[seq(2,n,2),]
View(silo3)
rownames(silo3) <- silo3[,12]
silo3 <- silo3[,c(4:11)]
colnames(silo3) <- c("0", "3", "5", "7", "9", "11", "13","15")
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3 ", Rowv=NA, Colv=NA)
jpeg(filename = "all-proteins/enrichment/heatmap-silo9", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 3000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1800, height = 1100)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1700, height = 1300)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1800, height = 1400)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1800, height = 1400)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 2000, height = 2000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 800, height = 800)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 3000, height = 3000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 3000, height = 3000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 100, height = 100)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "all-proteins/enrichment/heatmap-silo9.jpeg", width = 1400, height = 550)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
setwd("all-proteins/enrichment/")
jpeg(filename = "heatmap-silo9-clus.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "heatmap-silo9-clus.jpeg", width = 1400, height = 550)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9 ", Rowv=NA)
dev.off()
jpeg(filename = "heatmap-silo3.jpeg", width = 1400, height = 550)
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3 ", Rowv=NA, Colv=NA)
dev.off()
jpeg(filename = "heatmap-silo3-clus.jpeg", width = 1400, height = 550)
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3 ", Rowv=NA)
dev.off()
install.packages("BiocManager")
library(BiocManager)
?BiocManager::install
