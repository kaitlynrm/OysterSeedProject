Head(tABACUSdata)
library(readr)
never_expressed_proteins <- read_csv("~/Desktop/protein_abundance/never_expressed_proteins.csv")
View(never_expressed_proteins)
test <- never_expressed_proteins[,c(2:27)]
View(test)
test <- never_expressed_proteins[,c(1, 27:100)]
View(test)
test <- never_expressed_proteins[,-2]
test <- never_expressed_proteins[,c(-2:-27)]
antitest <- never_expressed_proteins[,c(2:27)]
View(antitest)
View(never_expressed_proteins)
write_excel_csv(test, "c:/Desktop")
write_excel_csv(test, "C:\Users\Katty\Desktop\protein_abundance")
write.csv(test, "C:\Users/Katty/Desktop/protein_abundance/")
write.csv(test, "C:\Users/Katty/Desktop/protein_abundance/no_expression")
cd
pwd
getwd()
write.csv(test, "Desktop/protein_abundance/no_expression.csv")
write.csv(test, "Desktop/protein_abundance/no_expression.csv")
library(readr)
never_exressed_proteins <- read_csv("~/Desktop/protein_abundance/never_expressed_proteins.
q
wq
n
q
write.csv(test, "Desktop/protein_abundance/no_expression.cs
all_data <- read_xlsx("Documents/robertslab/labnotebook/raw_data/annotated_os.xlsx")
all_data <- read_csv("Desktop/protein_abundance/annotated_os.csv")
View(all_data)
all_data <- read_csv("Desktop/protein_abundance/annotated_os.csv")
test <- all_data([,c(1:7, seq(from = 8, to = 29, by = 3))])
test <- all_data(,c(1:7, seq(from = 8, to = 29, by = 3)))
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 3))]
View(test)
silo2 <- test
rm(test)
View(silo2)
View(all_data)
test <- all_data[,c(1:7, 30:100, seq(from = 8, to = 29, by = 3))]
View(test)
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 3), 30:100)]
16:23
test2 <- test(,c(,-15:-23))
test2 <- test[,c(,-15:-23)]
test2 <- test[,c(,-15:23)]
test2 <- test[,-(c(,-15:23))]
test2 <- test[,-15:23]
test2 <- test[, c(1:15,24:100)]
test2 <- test[, c(1:15,24:86)]
View(test2)
write.csv(test, "Desktop/protein_abundance/silo2_raw.csv")
View(silo2)
View(test)
test <- all_data[,c(1:7, seq(from = 8, to = 29, by = 2), 30:100)]
View(test)
test <- all_data[,c(1:7, seq(from = 10, to = 31, by = 2), 30:100)]
View(test)
test <- all_data[,c(1:7, seq(from = 10, to = 31, by = 3), 30:100)]
View(test)
silo9 <- test
view(test2)
View(test2)
silo2 <- test2
rm(test2)
rm(test)
View(silo9)
rm(silo9)
View(all_data)
test <- all_data[, c(1:7), seq(from = 8, to = 30, by = 3), 31:100]
test <- all_data[, c(1:7, seq(from = 8, to = 30, by = 3), 31:100)]
View(test)
test <- all_data[, c(1:7, seq(from = 9, to = 30, by = 3), 31:100)]
View(all_data)
test <- all_data[, c(1:7, seq(from = 8, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 8, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 9, to = 29, by = 3), 31:100)]
test <- all_data[, c(1:7, seq(from = 9, to = 30, by = 3), 30:100)]
View(test)
test <- all_data[, c(1:7, seq(from = 9, to = 28, by = 3), 29:100)]
silo3 <- test
test <- all_data[, c(1:7, seq(from = 10, to = 28, by = 3), 29:100)]
View(test)
silo9 <- test
View(silo9)
View(silo2)
View(silo3)
View(silo9)
write.csv()
write.csv(silo2, "Desktop/protein_abundance/silo2_proteins")
write.csv(silo3, "Desktop/protein_abundance/silo3_proteins")
write.csv(silo9, "Desktop/protein_abundance/silo9_proteins")
write.csv(silo2, "Desktop/protein_abundance/silo2_proteins.csv")
write.csv(silo9, "Desktop/protein_abundance/silo9_proteins.csv")
write.csv(silo3, "Desktop/protein_abundance/silo3_proteins.csv")
#Set WD
getwd()
setwd("C:/Users/Katty/Documents/robertslab/oysterseedproject/R_work/")
#Install and load packages
install.packages("vegan")
library(vegan)
install.packages("raster")
library(raster)
install.packages("BioStatR")
library(BioStatR)
source("biostats.R")
########Create NMDS plot with silo 3 and 9################
#upload file
ABACUSdata <- read.csv("~/Documents/robertslab/oysterseedproject/raw_os_data/ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
#Remove NA
ABACUSdata[is.na(ABACUSdata)] <- 0
#Transpose- switch rows and columns
tABACUSdata <- t(ABACUSdata)
View(tABACUSdata)
#Rename Columns and remove row
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata = tABACUSdata[-1,]
Head(tABACUSdata)
#Convert to numeric
is.numeric(tABACUSdata)
#Remove Silo 2
silo3and9 <- tABACUSdata[-(seq(from = 2, to = 22, by = 3)), ]
#Make MDS dissimilarity matrix
nmds.silo3and9 <- metaMDS(silo3and9, distance = 'euclidean', k = 2, trymax = 3000, autotransform = FALSE)
#upload file
ABACUSdata <- read.csv("~Documents\robertslab\labnotebook\raw_data\ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
ABACUSdata <- read.csv("Documents\robertslab\labnotebook\raw_data\ABACUSdata.csv", header=TRUE)
library(readr)
ABACUSdata <- read_csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv")
View(ABACUSdata)
ABACUSdata <- read.csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv", header=TRUE)
View(ABACUSdata)
View(ABACUSdata)
#Remove NA
ABACUSdata[is.na(ABACUSdata)] <- 0
#Transpose- switch rows and columns
tABACUSdata <- t(ABACUSdata)
View(tABACUSdata)
#Rename Columns and remove row
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata = tABACUSdata[-1,]
Head(tABACUSdata)
#Convert to numeric
is.numeric(tABACUSdata)
install.packages("installr");
library(installr)
updateR()
install.packages("installr");
install.packages("installr")
library(installr)
updateR()
#install packages for vegan and cluster
install.packages("vegan")
library(vegan)
install.packages("cluster")
library(cluster)
install.packages("cluster")
library(permute)
library(lattice)
library(vegan)
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
install.packages("vegan")
install.packages("vegan")
library(permute)
library(lattice)
library(vegan)
install.packages("cluster")
install.packages("cluster")
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
install.packages("vegan")
library(vegan)
install.packages("vegan")
library(permute)
library(lattice)
library(vegan)
library(raster)
library(sp)
library(raster)
library(sp)
library(BioStatR)
source("biostats.R")
ABACUSdata <- read.csv("~/Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv", header=TRUE)
tABACUSdata <- t(ABACUSdata)
is.numeric(ABACUSdata)
as.numeric(ABACUSdata)
colnames(tABACUSdata) <- tABACUSdata[1,]
tABACUSdata <- tABACUSdata[-1,]
tABACUSdata[is.na(tABACUSdata)] <- 0
is.numeric(tABACUSdata)
as.numeric(tABACUSdata)
is.numeric(tABACUSdata)
tABACUSdata2 <- as.numeric(tABACUSdata)
is.numeric(tABACUSdata2)
write.csv("Documents/robertslab/tABACUS2.csv")
write.csv("Documents/robertslab/", tABACUSdata.csv)
?write.csv
write.csv(tABACUSdata, "Documents/robertslab/tABACUSdata.csv")
?clusplot()
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
pca_silo2 <- princomp(silo2)
summary(pca_silo2)
screeplot(pca_silo2)
silo2.2clus <- kmeans(silo2.eucd, centers=2, iter.max=10000, nstart=25)
View(tABACUSdata)
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
#Packages for annotations
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
#WGCNA package
install.packages("path/to/file", repos = NULL, lib=.Library)
install.packages(c("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
#Packages for annotations
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
#WGCNA package
install.packages("path/to/file", repos = NULL, lib=.Library)
install.packages("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("matrixStats") , "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("matrixStats")
install.packages( , "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
install.packages("Hmisc")
install.packages("splines")
install.packages("foreach")
install.packages("doParallel")
install.packages("fastcluster")
install.packages("dynamicTreeCut")
install.packaches("survival")
source("http://bioconductor.org/biocLite.R")
biocLite(c("GO.db", "preprocessCore", "impute"))
library("matrixStats", "Hmisc", "splines", "foreach", "doParallel", "fastcluster", "dynamicTreeCut", "survival")
library(matrixStats, Hmisc, splines, foreach, doParallel, fastcluster, dynamicTreeCut, survival)
library(matrixStats) library(Hmisc) library(splines) library(foreach) library(doParallel) library(fastcluster) library(dynamicTreeCut) library(survival)
library(matrixStats), library(Hmisc) library(splines) library(foreach) library(doParallel) library(fastcluster) library(dynamicTreeCut) library(survival)
library(matrixStats)
library(Hmisc)
library(lattice)
library(survival)
library(permute)
library(Formula)
library(ggplot2)
library(matrixStats)
library(Hmisc)
library(splines)
library(foreach)
library(doParallel)
library(fastcluster)
library(iterators)
library(parallel)
library(doParallel)
library(fastcluster)
library(dynamicTreeCut)
library(survival)
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
orgCodes = c("Hs", "Mm", "Rn", "Pf", "Sc", "Dm", "Bt", "Ce", "Cf", "Dr", "Gg");
orgExtensions = c(rep(".eg", 4), ".sgd", rep(".eg", 6));
packageNames = paste("org.", orgCodes, orgExtensions, ".db", sep="");
biocLite(c("GO.db", "KEGG.db", "topGO", packageNames, "hgu133a.db", "hgu95av2.db", "annotate", "hgu133plus2.db", "SNPlocs.Hsapiens.dbSNP.20100427", "minet", "OrderedList"))
source("http://bioconductor.org/biocLite.R")
biocLite(c("AnnotationDbi", "impute", "GO.db", "preprocessCore"))
install.packages("WGCNA")
library(permute)
library(lattice)
library(vegan)
library(cluster)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2.eucd <- vegdist(silo2, method='euclidean')
pca_silo2 <- princomp(silo2)
summary(pca_silo2)
screeplot(pca_silo2)
silo2.2clus <- kmeans(silo2.eucd, centers=4, iter.max=10000, nstart=25)
silo2.2clus <- kmeans(silo2.eucd, centers=3, iter.max=10000, nstart=25)
silo2.3clus <- kmeans(silo2.eucd, centers=3, iter.max=10000, nstart=25)
save.image("~/Documents/robertslab/r.RData")
?kmeans
?options
?max.print
silo2.3clus
show
library(vegan, cluster, pvclust, fpc)
sessionInfo()
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
View(silo2)
?rowMeans
silo2$mean <- rowMeans(silo2)
View(silo2)
silo2$stdev <- rowSds(silo2)
install.packages("matrixStats")
library(matrixStats)
silo2$stdev <- rowSds(silo2)
?apply
silo2.matrix <-  data.matrix(silo2, rownames.force = NULL)
silo2.matrix <-  data.matrix(silo2)
silo2$stdev <- rowSds(silo2)
silo2.matrix$stdev <- rowSds(silo2)
silo2$stdev <- rowSds(silo2.matrix) #standard deviation
install.packages("matrixStats")
library(matrixStats)
allsilos <- read.csv('Documents/robertslab/labnotebook/raw_data/ABACUSdata.csv', header=T, row.names=1 )
silo2 <- allsilos[, (seq(from = 2, to = 22, by = 3))]
silo3 <- allsilos[, (seq(from = 3, to = 22, by = 3))]
silo9 <- allsilos[, (seq(from = 4, to = 22, by = 3))]
silo2$mean <- rowMeans(silo2) #mean
silo2.matrix <-  data.matrix(silo2)
silo2$stdev <- rowSds(silo2.matrix) #standard deviation
silo2$variance <- rowVars(silo2.matrix) #variance
silo2$total-abundance <- rowSums(silo2) #sum
?row
silo2$Total.Abundance <- rowSums(silo2) #sum
silo2$median <- rowMedians(silo2)
silo2$median <- rowMedians(silo2.matrix)
unq.prot <- read.csv("unique-clus-prot-silo3_9.csv")
unq.prot <- unq.prot[,c(1:11)]
unq.prot$Protein <-  paste(unq.prot$Silo, "_", unq.prot$Protein, sep = "")
colnames(unq.prot) <- c("Protein", "Cluster","Silo", "0", "3", "5", "7", "9", "11", "13", "15")
setwd("Documents/robertslab/labnotebook/analysis/clustering/silo3_9/all-proteins/")
unq.prot <- read.csv("unique-clus-prot-silo3_9.csv")
unq.prot <- unq.prot[,c(1:11)]
unq.prot$Protein <-  paste(unq.prot$Silo, "_", unq.prot$Protein, sep = "")
colnames(unq.prot) <- c("Protein", "Cluster","Silo", "0", "3", "5", "7", "9", "11", "13", "15")
row.names(unq.prot) <- unq.prot$Protein
unq.prot <- unq.prot[,-c(1:3)]
heatmap(as.matrix(unq.prot), scale = "column", col=heat.colors(256), main="Unique Proteins", Colv=NA)
heatmap(as.matrix(unq.prot), scale = "column", col=heat.colors(256), main="Unique Proteins", Rowv=NA)
heatmap(as.matrix(unq.prot), scale = "column", col=heat.colors(256), main="Unique Proteins")
unq.prot2 <- read.csv("unique-clus-prot-silo3_9.csv")
unq.prot2 <- unq.prot2[,c(1:11)]
unq.prot2 <- unq.prot2[,-c(2)]
colnames(unq.prot2) <- c("Protein", "Silo", "0", "3", "5", "7", "9", "11", "13", "15")
silo3 <- unq.prot2[ which(unq.prot2$Silo == '3'),]
silo9 <- unq.prot2[ which(unq.prot2$Silo == '9'),]
row.names(silo3) <- silo3$Protein
row.names(silo9) <- silo9$Protein
silo3 <- silo3[,-c(1:2)]
silo9 <- silo9[,-c(1:2)]
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3", Rowv=NA, Colv=NA)
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3", Rowv=NA, Colv=NA)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9", Rowv=NA,Colv=NA)
install.packages("ComplexHeatmap")
metboanalyst <- read.csv("../../../MetboAnalyst/silo3_9-Metbo_format.csv")
View(metboanalyst)
View(unq.prot)
test <- t(unq.prot2)
View(test)
rm(tABACUSdata)
test <- gather(unq.prot2, key = "Time", value = "Abundance", c(3:10))
install.packages("tidyr")
library(tidyr)
test <- gather(unq.prot2, key = "Time", value = "Abundance", c(3:10))
View(test)
test <- spread(test, "Protein", "Abundance")
any(is.na(data))
any(is.na(test))
class(test$Silo)
test <- test[order(Time)]
test <- test[order(test$Time)]
test <- test[order(Time)]
test <- order(test$Time)
metboanalyst <- read.csv("../../../MetboAnalyst/silo3_9-Metbo_format.csv")
library(tidyr)
test <- gather(unq.prot2, key = "Time", value = "Abundance", c(3:10))
test <- spread(test, "Protein", "Abundance")
test <- test[order(test$Time)]
test <- gather(unq.prot2, key = "Time", value = "Abundance", c(3:10))
test <- spread(test, "Protein", "Abundance")
View(test)
?order
test[order(test$Time),]
test2 <- test[order(test$Time),]
View(test)
View(test)
View(test2)
class(test$Time)
test$Time <- as.numeric(test$Time)
class(test$Time)
test2 <- test[order(test$Time),]
View(test)
test2$Sample <- paste("S", test2$Silo,"T", test2$Time, sep = "")
test3 <- test2[,c(ncol(test2),1:ncol(test2)-1)]
View(test3)
write.csv(test3, "../../../../../metbo-unqprot-test")
write.csv(test3, "../../../../../metbo-unqprot-test.csv")
View(metboanalyst)
write.csv(test3, "../../../../../metbo-unqprot-test.csv", row.names = FALSE)
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3", Colv=NA)
jpeg(filename = "heatmap-silo3.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo3), scale = "column", col=heat.colors(256), main="Silo 3", Colv=NA)
dev.off()
jpeg(filename = "heatmap-silo9.jpeg", width = 1000, height = 1000)
heatmap(as.matrix(silo9), scale = "column", col=heat.colors(256), main="Silo 9", Colv=NA)
dev.off()
all.proteins <- read.csv("silo3_9-all_proteins.csv")
annotations <- read.csv("../../../../data/allsilos-tag_and_annot.csv")
View(all.proteins)
View(annotations)
colnames(all.proteins)[1] <- "Protein"
View(all.proteins)
all.proteins$silo <- substr(all.proteins$Protein,1,1)
class(data$Protein)
class(all.proteins$Protein)
all.proteins$Protein <- as.character(unlist(all.proteins$Protein))
class(all.proteins$Protein)
data$Protein <- substr(data$Protein, 3, nchar(data$Protein))
all.proteins$Protein <- substr(all.proteins$Protein, 3, nchar(all.proteins$Protein))
all.proteins <- all.proteins[,c(ncol(all.proteins),1:ncol(all.proteins)-1)]
colnames(annotations)[1] <- "Protein"
View(annotations)
all.proteins <- all.proteins[,c(1:2)]
View(all.proteins)
merge <- merge(annotations, all.proteins, by = "Protein")
View(merge)
merge <- merge(all.proteins, annotations, by = "Protein")
colnames(merge)[51] <- "Uniprot-Acces"
merge1 <- merge[,c(which(colnames(merge)=="Uniprot-Acces"))]
merge1 <- merge[,c(which(colnames(merge)=="Uniprot-Acces"):ncol(merge))]
View(merge1)
merge1 <- merge[,c(which(colnames(merge)=="Uniprot-Acces"):ncol(merge)-1)]
all.proteins <- read.csv("silo3_9-all_proteins.csv")
colnames(all.proteins)[1] <- "Protein"
all.proteins$silo <- substr(all.proteins$Protein,1,1)
View(all.proteins)
class(all.proteins$Protein)
all.proteins$Protein <- as.character(unlist(all.proteins$Protein))
all.proteins$Protein <- substr(all.proteins$Protein, 3, nchar(all.proteins$Protein))
all.proteins <- all.proteins[,c(ncol(all.proteins),1:ncol(all.proteins)-1)]
annotations <- read.csv("../../../../data/allsilos-tag_and_annot.csv")
colnames(annotations)[1] <- "Protein"
annotations <- annotations[,-c(2:23)]
View(annotations)
merge <- merge(all.proteins, annotations, by = "Protein")
View(merge)
colnames(merge)[37] <- "Uniprot"
merge <- merge[,c(1:10,37)]
merge <- merge[,c(ncol(merge),1:ncol(merge)-1)]
write.csv(merge, "all_prot-uniprot")
write.csv(merge, "all_prot-uniprot.csv")
write.csv(merge, "all_prot-uniprot.csv", row.names = FALSE)
write.csv(merge, "all_prot-uniprot.csv", row.names = FALSE)
merge1 <- merge[!duplicated(merge), ]
merge1 <- merge[duplicated(merge), ]
View(merge1)
merge1 <- merge[duplicated(merge$Protein), ]
View(metboanalyst)
View(merge1)
final <- merge1[,1:2]
write.csv(merge, "all_prot-uniprot.csv", row.names = FALSE)
write.csv(merge, "all_prot-uniprot.csv", row.names = FALSE)
write.csv(final, "all_prot-uniprot.csv", row.names = FALSE)
